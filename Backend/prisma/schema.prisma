generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clicks {
  id           BigInt    @id @default(autoincrement())
  short_url    String    @db.VarChar(20)
  click_time   DateTime? @default(now()) @db.Timestamptz(6)
  country_code String?   @db.Char(2)
  urls         urls      @relation(fields: [short_url], references: [short_url], onDelete: Cascade, onUpdate: NoAction, map: "fk_short_url")

  @@index([short_url, click_time(sort: Desc)], map: "idx_clicks_on_url_desc")
}

model refresh_tokens {
  jti        String   @id @db.VarChar(255)
  user_id    BigInt
  expires_at DateTime @db.Timestamptz(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user")

  @@index([expires_at], map: "idx_refresh_tokens_expire_at")
  @@index([user_id], map: "idx_refresh_tokens_user_id")
}

model urls {
  short_url    String    @id @db.VarChar(20)
  owner_id     BigInt
  original_url String
  alias        String?   @db.VarChar(50)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  expires_at   DateTime? @db.Timestamptz(6)
  clicks       clicks[]
  users        users     @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_owner")

  @@unique([owner_id, alias])
}

model users {
  id             BigInt           @id @default(autoincrement())
  username       String           @unique(map: "users_email_key") @db.VarChar(255)
  password_hash  String           @db.VarChar(255)
  refresh_tokens refresh_tokens[]
  urls           urls[]
}
